#!/usr/bin/env bash

# Creates a new CA root key and certificate.
# Use the CA certificate to sign any CSRs for your local websites.
# Import the resulting file ca-root.crt into your browser's
# list of authorities to make the browser trust your local sites.

CA_NAME=AAAA
CA_KEY_FILE=ca-root.key
CA_CRT_FILE=ca-root.crt
CA_PASSPHRASE_FILE=ca-passphrase
DAYS=365

# Check for existing keyfile.
if [ -f $CA_KEY_FILE ]; then
    read -p "Existing CA keyfile $CA_KEY_FILE found; overwrite? [y/N] " YN
    if [[ $YN != 'y' && $YN != 'Y' ]]; then exit 0; fi
fi

# Check for existing certificate.
if [ -f $CA_CRT_FILE ]; then
    read -p "Existing CA certificate $CA_CRT_FILE found; overwrite? [y/N] " YN
    if [[ $YN != 'y' && $YN != 'Y' ]]; then exit 0; fi
fi

# Fetch the CA passphrase, either from CA_PASS_FILE or from stdin.
if [ ! -f $CA_PASSPHRASE_FILE ]; then
    read -s -p "Enter CA passphrase: " CA_PASSPHRASE
    echo $CA_PASSPHRASE > $CA_PASSPHRASE_FILE
else
    CA_PASSPHRASE=$(<$CA_PASSPHRASE_FILE)
fi

# Create a private CA key.
echo "Creating private CA key $CA_KEY_FILE"
openssl genpkey -quiet -algorithm rsa -aes256 \
-pass pass:$CA_PASSPHRASE -out $CA_KEY_FILE

# Create a self-signed CA root certificate.
echo "Creating self-signed CA certificate $CA_CRT_FILE"
openssl req -x509 -new -noenc -key $CA_KEY_FILE -passin pass:$CA_PASSPHRASE \
-days $DAYS -out $CA_CRT_FILE -subj "/C=NL/O=$CA_NAME/CN=$CA_NAME"

echo "Done"
