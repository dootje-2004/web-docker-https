#!/usr/bin/env bash

# Creates a private key and a signed certificate to deploy on a server.
#
# Usage:  make-ca domain

# Process the command line.
if [ $# -lt 1 ]; then
    echo "  Usage:  $0 <domain>"
    exit 0
fi

DOMAIN=$1
CA_KEY_FILE=ca-root.key
CA_CRT_FILE=ca-root.crt
CA_PASS_FILE=ca-passphrase
SERVER_KEY_FILE=server.key
SERVER_CRT_FILE=server.crt
SERVER_PASSPHRASE_FILE=pk-passphrase-for-apache.sh

# Check for CA key.
if [ ! -f $CA_KEY_FILE ]; then
    >&2 echo "CA key $CA_KEY_FILE not found"
    exit 1
fi

# Check for CA certificate.
if [ ! -f $CA_CRT_FILE ]; then
    >&2 echo "CA certificate $CA_CRT_FILE not found"
    exit 1
fi

# Check for CA passphrase file.
if [ ! -f $CA_PASS_FILE ]; then
    >&2 echo "CA passphrase file $CA_PASS_FILE not found"
    exit 1
fi
CA_PASSPHRASE=<(cat $CA_PASS_FILE)

# Ask for domain passphrase.
read -s -p "Enter passphrase for private key: " PK_PASSPHRASE
echo

# Generate private key.
echo "Generating private key"
openssl genpkey -quiet -algorithm rsa -pass pass:$PK_PASSPHRASE \
-aes256 -out $SERVER_KEY_FILE

# Create a signing request from the private key.
echo "Creating signing request"
openssl req -new -key $SERVER_KEY_FILE -out $DOMAIN.csr \
-passin pass:$PK_PASSPHRASE -subj "/CN=$DOMAIN" \
-addext "subjectAltName=email:admin@$DOMAIN"

# Sign the request with the CA root certificate.
echo "Signing request with root certificate"
openssl x509 -in $DOMAIN.csr -req -CA $CA_CRT_FILE -CAkey $CA_KEY_FILE \
-passin pass:$CA_PASSPHRASE -out $SERVER_CRT_FILE \
-extfile <(printf "authorityKeyIdentifier=keyid,issuer\n
basicConstraints=CA:FALSE\nsubjectAltName=DNS:$DOMAIN")

# Create a passphrase file for Apache.
printf "#!/bin/sh\necho \"$PK_PASSPHRASE\"" > $SERVER_PASSPHRASE_FILE
chmod a+x $SERVER_PASSPHRASE_FILE
echo "Passphrase written to $SERVER_PASSPHRASE_FILE"

echo "Done"
